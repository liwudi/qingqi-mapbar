apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false


/**
 * 线上客服key
 */
def YUNXIN_AMAP_KEY     = "34742e4968884821fb3f14160545c512"
def YUNXIN_APP_KEY      = "34742e4968884821fb3f14160545c512"
/**
 * 测试客服key
 */
def YUNXIN_AMAP_TEST_KEY  = "13f2d26757f7d3c9802140e735a49b37"
def YUNXIN_APP_TEST_KEY   = "13f2d26757f7d3c9802140e735a49b37"

def STAT_MAPBAR_APP_KEY = "c11ff0503aa84d0ea7d0bdaba84358c2"
def STAT_UMENG_APP_KEY  = "58b546a404e205a4df00049b"
def PUSH_MAPBAR_APP_KEY = "c8e508c248884fb1ac987d07260c1da1"
def PUSH_MAPBAR_APP_KEY_TEST = "test-bec626e347a04655a61aaf66f8fffa5f"

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.mapbar.qingqi.driver"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 10018
        versionName "1.1.8"
        ndk {
            abiFilters "armeabi-v7a"
        }
        manifestPlaceholders = [
                YUNXIN_AMAP_KEY     : YUNXIN_AMAP_TEST_KEY,
                YUNXIN_APP_KEY      : YUNXIN_APP_TEST_KEY,
                STAT_MAPBAR_APP_KEY : STAT_MAPBAR_APP_KEY,
                STAT_UMENG_APP_KEY  : STAT_UMENG_APP_KEY,
                PUSH_MAPBAR_APP_KEY : PUSH_MAPBAR_APP_KEY_TEST,
        ]

    }
    signingConfigs {
        release { ////打release包 请取消注释   gradlew assembleRelease
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a"
        }
    }
    buildTypes {
        //现网
        release {
            manifestPlaceholders = [
                    YUNXIN_AMAP_KEY     : YUNXIN_AMAP_KEY,
                    YUNXIN_APP_KEY      : YUNXIN_APP_KEY,
                    STAT_MAPBAR_APP_KEY : STAT_MAPBAR_APP_KEY,
                    STAT_UMENG_APP_KEY  : STAT_UMENG_APP_KEY,
                    PUSH_MAPBAR_APP_KEY : PUSH_MAPBAR_APP_KEY,
            ]
            buildConfigField "String", "server_url", "\"http://jfx.mapbar.com/api\""
            buildConfigField "String", "server_type", "\"release\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release //打release包 请取消注释
        }

        debug {
            buildConfigField "String", "server_url", "\"http://61.161.238.158:8950\""
            buildConfigField "String", "server_type", "\"debug152\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        release151 {
            buildConfigField "String", "server_url", "\"http://10.30.50.151:8950\""
            buildConfigField "String", "server_type", "\"debug151\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }

        release152 {
            buildConfigField "String", "server_url", "\"http://61.161.238.158:8950\""
            buildConfigField "String", "server_type", "\"debug152\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }

        release153 {
            buildConfigField "String", "server_url", "\"http://10.30.50.153:8950\""
            buildConfigField "String", "server_type", "\"debug153\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }

        release8071 {
            buildConfigField "String", "server_url", "\"http://10.30.50.152:8071/apipre\""
            buildConfigField "String", "server_type", "\"debug8071\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "qingqi_driver_v${defaultConfig.versionName}_${releaseTime()}_${variant.name}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile project(':react-native-permissions')
    compile project(':rnkit-actionsheet-picker')
    compile project(':@remobile/react-native-toast')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.facebook.react:react-native:+'
     // For animated GIF support
    compile 'com.facebook.fresco:animated-gif:0.11.0'

    // From node_modules
    compile project(':react-native-vector-icons')
    compile project(':react-native-image-picker')
    compile project(':react-native-splash-screen')
    compile project(':react-native-fetch-blob')
    compile project(':react-native-image-resizer')
    compile project(':react-native-video')
    compile project(':uikit')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

project.ext.vectoricons = [
    iconFontNames: [ 'Entypo.ttf','EvilIcons.ttf','FontAwesome.ttf','Foundation.ttf','Ionicons.ttf','MaterialIcons.ttf','Octicons.ttf','Zocial.ttf'  ] // Name of the font files you want to copy
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"